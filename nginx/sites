# The following map statement is required
# if you plan to support channels. See https://www.nginx.com/blog/websocket-nginx/
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;

    index index.html index.htm index.nginx-debian.html;

    server_name _;

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;
    }

    # Serve tonic-time
    location /time {
        proxy_redirect off;

        # Needed in order to redirect socket connection requests from
        # `/time/socket` to `/socket`. Adding an additonal slash, i.e.
        # /$1, will route to `//socket`.
        rewrite /time/(socket/.*) /$1 break;
        rewrite /time(.*) /$1 break;

        # The following two headers need to be set in order
        # to keep the websocket connection open. Otherwise you'll see
        # HTTP 400's being returned from websocket connections.
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;

        # Phoenix Controller sets this to DENY by default, in this case
        # I want to use this demo in an iFrame so I need to change it.
        proxy_hide_header X-Frame-Options;
        add_header X-Frame_options "ALLOWALL";

        proxy_pass http://127.0.0.1:4000;
    }

    # Serve route_planner frontend
    location /route_planner {
        default_type "text/html";

        alias /var/www/html/route_planner;
        index index.html;
    }

    # Serve route_planner backend
    location /route {
        proxy_redirect off;

        proxy_pass http://127.0.0.1:4001;
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    location ~ /\.ht {
        deny all;
    }
}
